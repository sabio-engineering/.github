name: Maven Build

#Set the env's to match your projects build requirements
env:
  JAVA_VERSION: '11'
  JAVA_DISTRUBUTION: 'adopt'
  DOCKER_BUILD: true
  DOCKER_BUILD_WINDOWS: true
  DOCKER_IMAGE_NAME: com.sabiogroup/APPLICATION_NAME
  ALWAYS_ARCHIVE: true



on:
  push:
    tags:
      - '*'
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop

jobs:
  build-test:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: $JAVA_VERSION
          distribution: $JAVA_DISTRIBUTION

      - name: Setup Maven Config
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "github-packages", "url": "https://maven.pkg.github.com/sabio-engineering/*" }]'
          servers: '[{ "id": "github-packages", "username": "read-only-access", "password": "${{ secrets.PACKAGE_ACCESS_TOKEN }}" }, { "id": "github", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build & Test
        run: mvn -B test --file pom.xml
      
  archive-maven:
    needs: build-test
    if: {{ $github.ref == 'refs/tags/*' || env.ALWAYS_ARCHIVE }} 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: $JAVA_VERSION
          distribution: $JAVA_DISTRIBUTION

      - name: Setup Maven Config
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "github-packages", "url": "https://maven.pkg.github.com/sabio-engineering/*" }]'
          servers: '[{ "id": "github-packages", "username": "read-only-access", "password": "${{ secrets.PACKAGE_ACCESS_TOKEN }}" }, { "id": "github", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Publish to GitHub Packages 
        run: mvn -B deploy -DskipTests

  archive-docker:
    needs: build-test
    if: {{ ($github.ref == 'refs/tags/*' || env.ALWAYS_ARCHIVE) && env.DOCKER_BUILD }} 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: $JAVA_VERSION
          distribution: $JAVA_DISTRIBUTION

      - name: Setup Maven Config
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: '[{ "id": "github-packages", "url": "https://maven.pkg.github.com/sabio-engineering/*" }]'
          servers: '[{ "id": "github-packages", "username": "read-only-access", "password": "${{ secrets.PACKAGE_ACCESS_TOKEN }}" }, { "id": "github", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Docker with Maven
        run: mvn docker:build -P docker
        
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/pulse
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=latest
          
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          docker tag $DOCKER_IMAGE_NAME $IMAGE_ID:$VERSION
          docker images
          echo $IMAGE_ID:$VERSION
          docker image push --all-tags $IMAGE_ID
